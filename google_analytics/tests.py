import re
from httplib2 import Http
from django.utils.http import urlencode

from django.test import TestCase, Client
from django.conf import settings
from django.test.client import RequestFactory

from mock import patch, Mock

from google_analytics.templatetags.google_analytics_tags \
    import GoogleAnalyticsNode
from google_analytics import utils
from google_analytics.tasks import send_tracking


class BaseTestCase(TestCase):
    HEADERS = {
        'HTTP_USER_AGENT': 'TestClient',
        'HTTP_X_FORWARDED_FOR': '192.168.32.64',
        'HTTP_ACCEPT_LANGUAGE': 'en-GB',
        'HTTP_HOST': 'www.example.com',
        'HTTP_REFERER': 'www.referer.com'
    }
    PATH = '/index/'

    def setUp(self):
        super(BaseTestCase, self).setUp()
        self._request = Http.request
        Http.request = Mock()
        Http.request.return_value = ('', '')
        self.factory = RequestFactory(**self.HEADERS)
        no_ref_headers = self.HEADERS.copy()
        del no_ref_headers['HTTP_REFERER']
        self.client = Client(**no_ref_headers)

    def tearDown(self):
        super(BaseTestCase, self).tearDown()
        Http.request = self._request

    def create_gif_url(self, use_ua=False):
        request = self.factory.get(self.PATH)
        node = GoogleAnalyticsNode(debug=False, use_ua=use_ua)
        url = node.render(context={'request': request})
        # check that path and referer are added to the gif url
        self.assertIn(urlencode({'p': self.PATH}), url)
        self.assertIn(urlencode({'r': self.HEADERS['HTTP_REFERER']}), url)
        return url

    def check_ga_request_headers(self):
        headers = Http.request.call_args[1]['headers']
        self.assertEqual(headers['User-Agent'],
                         self.HEADERS['HTTP_USER_AGENT'])
        self.assertEqual(headers['X-Forwarded-For'],
                         self.HEADERS['HTTP_X_FORWARDED_FOR'])
        self.assertEqual(headers['Accept-Language'],
                         self.HEADERS['HTTP_ACCEPT_LANGUAGE'])


class GATestCase(BaseTestCase):

    def test_build_url(self):
        ga_url = self.create_gif_url()
        response = self.client.get(ga_url)
        self.assertEqual(response['Content-Type'], 'image/gif')
        self.assertEqual(response.status_code, 200)
        self.check_ga_request_headers()
        # this call should be a GET request
        self.assertEqual(Http.request.call_args[0][1].upper(), 'GET')
        # check that all the parameters are in the url
        params_exist = ['utmsr', 'utme', 'utmvid', 'utmn', 'utmwv', 'utmip']
        params_equal = {
            'utmhn': self.HEADERS['HTTP_HOST'],
            'utmr': self.HEADERS['HTTP_REFERER'],
            'utmp': self.PATH,
            'utmac': settings.GOOGLE_ANALYTICS['ga_google_analytics_id']
            .replace('UA', 'MO'),
        }
        url = Http.request.call_args[0][0]
        for param in params_exist:
            self.assertIn(param, url)
            self.assertNotIn('%s=None' % param, url)
        for param, val in params_equal.iteritems():
            self.assertIn(urlencode({param: val}), url)
        # check that format of visitor id is correct
        # 0x0000000000000000
        self.assertTrue(re.search(r'utmvid=0x\w{16}', url))

    def test_cookie(self):
        ga_url = self.create_gif_url()
        self.client.get(ga_url)
        visitor_id = self.client.cookies[utils.GA_COOKIE_NAME]
        self.client.get(ga_url)
        self.assertEqual(self.client.cookies[utils.GA_COOKIE_NAME],
                         visitor_id)

    def test_send_tracking(self):
        """
        Check that the same hit url is generated by the celery
        task and the gif view.
        """
        # track hit via gif url
        url = self.create_gif_url()
        self.client.get(url)
        # track hit via celery task
        request = self.factory.get(self.PATH)
        # fake a session
        request.session = {}
        # fake the same visitor id
        request.COOKIES = {
            '__utmmobile': re.search(r'__utmmobile=(0x\w+);',
                                     str(self.client.cookies['__utmmobile']))
                             .group(1)
        }
        params = utils.build_ga_params(
            request,
            path=self.PATH,
            referer=request.META.get('HTTP_REFERER')
        )
        send_tracking(
            params,
            x_forwarded_for=request.META.get('HTTP_X_FORWARDED_FOR')
        )

        def sorted_url(url):
            host, params = url.split('?', 1)
            params = params.split('&')
            params = filter(lambda x: not x.startswith(('utmn', 'utmcc')),
                            params)
            params.sort()
            return "%s?%s" % (host, '&'.join(params))

        self.assertEqual(sorted_url(Http.request.call_args_list[0][0][0]),
                         sorted_url(Http.request.call_args_list[1][0][0]))

    def test_raw_user_agent(self):
        from sre_constants import error
        # the issue with this string is the r'\\\d+' group references
        wonky_ua = 'RATECH55_512256_11B_HW (MRE\\2.5.00(3072) resolution\\220176 chipset\\MT6255 touch\\0 tpannel\\0 camera\\1 gsensor\\0 keyboard\\normalWAP Browser/MAUI (HTTP PGDL;HTTPS)) A685_T21_A1_MLA_11B_V4_5_0411 Release/2013.04.11 WAP Browser/MAUI (HTTP PGDL; HTTPS) Profile/Profile/MIDP-2.0 Configuration/CLDC-1.1 Q03C1-2.40 en-US'
        self.assertRaises(error, re.sub, ' ', wonky_ua, ' ')
        # not a great fix
        fixed_ua = wonky_ua.replace('\\', '/')
        # should not raise an error anymore
        re.sub(' ', fixed_ua, ' ')


def custom_data(request):
    return {'cd1': 'CustomValue', 'cm1': 1}


class UATestCase(BaseTestCase):

    def test_build_url(self):
        ua_url = self.create_gif_url(True)
        response = self.client.get(ua_url)
        self.assertEqual(response['Content-Type'], 'image/gif')
        self.assertEqual(response.status_code, 200)
        self.check_ga_request_headers()
        # this call should be a POST request
        self.assertEqual(Http.request.call_args[0][1].upper(), 'POST')
        # check that all the parameters are in the body
        params_exist = ['v', 'z', 'cid']
        params_equal = {
            'dh': self.HEADERS['HTTP_HOST'],
            'dr': self.HEADERS['HTTP_REFERER'],
            'dp': self.PATH,
            'tid': settings.GOOGLE_ANALYTICS['ua_google_analytics_id'],
            't': 'pageview',
        }
        body = Http.request.call_args[1]['body']
        for param in params_exist:
            self.assertIn(param, body)
            self.assertNotIn('%s=None' % param, body)
        for param, val in params_equal.iteritems():
            self.assertIn(urlencode({param: val}), body)
        # check that format of visitor id is correct
        # 35009a79-1a05-49d7-b876-2b884d0f825b
        self.assertTrue(re.search(r'cid=\w{8}-(\w{4}-){3}\w{12}', body))

    def test_cookie(self):
        ga_url = self.create_gif_url(True)
        self.client.get(ga_url)
        visitor_id = self.client.cookies[utils.UA_COOKIE_NAME]
        self.client.get(ga_url)
        self.assertEqual(self.client.cookies[utils.UA_COOKIE_NAME],
                         visitor_id)

    def test_custom_data(self):
        ga_url = self.create_gif_url(True)
        self.client.get(ga_url)
        body = Http.request.call_args[1]['body']
        for key, val in custom_data(None).iteritems():
            self.assertIn(urlencode({key: val}), body)
